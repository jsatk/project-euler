// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.

// Utility
fn sum(i: Vec<u32>) -> u32 {
    return i.into_iter().fold(0, |acc, n| acc + n );
}

fn is_multiple_of<'a, 'b>(n: & 'a u32, m: & 'b u32) -> bool {
    return n % m == 0;
}

fn is_even<'a>(n: & 'a u32) -> bool {
    return is_multiple_of(n, &2);
}

fn sum_tail(v: &Vec<u32>) -> u32 {
    return v[v.len() - 2] + v[v.len() - 1];
}

// Problem-specific
fn get_fibonacci_below(limit: u32) -> Vec<u32> {
    let mut fibonacci = vec![1, 2];
    let mut done = fibonacci[fibonacci.len() - 1] >= limit;

    while !done {
        let next_number = sum_tail(&fibonacci);
        fibonacci.push(next_number);
        done = fibonacci[fibonacci.len() - 1] >= limit;
    }

    return fibonacci;
}

fn main() {
    let four_million = 4_000_000;
    let fibonacci = get_fibonacci_below(four_million);
    let evens = fibonacci.into_iter().filter(is_even).collect();
    let sum_of_evens = sum(evens);

    println!("Answer: {}", sum_of_evens);
}
